# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MZlVrcueq7AtKXqIL8qt7j-HK9NTVaZn
"""

import numpy as np
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from sklearn import preprocessing
from sklearn.metrics import mean_squared_error

# def decision_tree(x_train, y_train, x_test, y_test):
#     min_max_scaler = preprocessing.MinMaxScaler()
#     x_train= min_max_scaler.fit_transform(x_train)
#     x_test = min_max_scaler.transform(x_test)
#     model = DecisionTreeRegressor()
#     model.fit(x_train, y_train)
#     preds = model.predict(x_test)
#     return mean_squared_error(y_test,predictionsDT)

# def SVM(x_train, y_train, x_test, y_test):
#     regressor = SVR(kernel='rbf')
#     svclassifier.fit(x_train, y_train)
#     predictionsSVC= svclassifier.predict(x_test)
#     a2=accuracy_score(y_test,predictionsSVC)
#     #print (a2)
#     return(a2)

# def KNN(x_train, y_train, x_test, y_test):
#     knn = KNeighborsRegressor(n_neighbors=2)# 5 is our choice
#     knn.fit(x_train, y_train)
#     predictionsKNN = knn.predict(x_test)
#     a3=accuracy_score(y_test,predictionsKNN)
#     return(a3)

# def NN(x_train, y_train, x_test, y_test):
#    # https://stackoverflow.com/questions/16879928/neural-networks-regression-using-pybrain
#    pass

def run_regression(regressor, x_train, y_train, x_test, y_test):
    regressor.fit(x_train, y_train)
    preds = regressor.predict(x_test, y_test)
    return mean_squared_error(y_test, preds)


# opts
regressors = {
    "svr" : lambda : SVR(),
    "dtr": lambda : DecisionTreeRegressor(),
    "knn": lambda : KNeighborsRegressor(n_neighbors=5)
}

# load data
# dummy:
x_train, x_test = np.random.rand(100, 50), np.random.rand(30, 50)
y_train, y_test = np.random.rand(100), np.random.rand(30)

results = {}

# iterate over regressors
for name, model_func in regressors.items():
    regressor = model_func()
    performance = run_regression(regressor, x_train, y_train, x_test, y_test)
    run_id = f"regressor_{name}"
    results[run_id] = performance


